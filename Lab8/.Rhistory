print(data_summary)
library(modelsummary)
data_summary <- datasummary_balance( ~ burn_frequ,
data = clean_dat,
stars = TRUE,
dinm = FALSE
)
cat("Table 1: Data Based on Burn Frequency Levels")
print(data_summary)
ggintplot(response = "nonstructural_perc", groupvars = c("ADL_perc", "burn_freq"),
data = clean_dat)
print(data_summary)
View(clean_dat)
View(dat)
dat <- read.csv("OS_data.csv")
dim(dat)
clean_dat <- dat %>%
select(plot, nonstructural_perc, ADL_perc, burn_frequ) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(burn_frequ))
dim(clean_dat)
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
clean_dat <- dat %>%
select(plot, nonstructural_perc, ADL_perc, burn_frequ) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(burn_frequ))
dim(clean_dat)
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
lmer_model <- lmer(nonstructural_perc ~ burn_frequ * ADL_perc + (1 | plot), data = clean_dat)
summary(lmer_model)
plot(allEffects(lmer_model, residuals = T), grid = T)
NSC_model <- lm(nonstructural_perc ~ burn_frequ * ADL_perc, data = clean_dat)
summary(lmer_model)
summary(NSC_model)
plot(allEffects(NSC_model, residuals = T), grid = T)
clean_dat <- dat %>%
select(nonstructural_perc, ADL_perc, burn_frequ) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(burn_frequ))
dim(clean_dat)
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
ggplot(dat, aes(x = burn_frequ, y = nonstructural_perc)) +
geom_point() +
geom_smooth(method = "lm", color = "cadetblue4") +
labs(title = "Nonstructural Carbohydrates vs Burn Frequency",
x = "Burn Frequency",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal()
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc)) +
geom_point() +
geom_smooth(method = "lm", color = "gray") +
labs(title = "Nonstructural Carbohydrates vs Acid Detergent Lignin",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal()
ggplot(dat, aes(x = burn_frequ, y = ADL_perc)) +
geom_point() +
geom_smooth(method = "lm", color = "cadetblue4") +
labs(title = "Acid Detergent Lignin (%) vs Burn Frequency",
x = "Burn Frequency",
y = "Acid Detergent Lignin (%)") +
theme_minimal()
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Interaction of Burn Frequency and Acid Detergent Lignin",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal() +
scale_color_manual(values = c("red", "blue", "green"))
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Interaction of Burn Frequency and Acid Detergent Lignin",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal() +
scale_color_manual(values = c("red", "blue", "green"))
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Interaction of Burn Frequency and Acid Detergent Lignin",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal()
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Nonstructural Carbohydrates vs Acid Detergent Lignin by Burn Frequency",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
facet_wrap(~plot) +  # Facet by plot if there are multiple measurements per plot
theme_minimal()
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Nonstructural Carbohydrates vs Acid Detergent Lignin by Burn Frequency",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal()
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Interaction of Burn Frequency and Acid Detergent Lignin",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal()
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Interaction of Burn Frequency and Acid Detergent Lignin",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)") +
theme_minimal()
color = "Burn frequency (Fire/yr)) +
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Nonstructural Carbohydrates vs Acid Detergent Lignin by Burn Frequency",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)",
color = "Burn frequency (Fire/yr)") +
theme_minimal()
ggplot(dat, aes(x = burn_frequ, y = nonstructural_perc, color = ADL_perc)) +
geom_point() +
geom_smooth(method = "lm", color = "cadetblue4") +
labs(title = "Nonstructural Carbohydrates vs Burn Frequency",
x = "Burn Frequency",
y = "Nonstructural Carbohydrates (%)",
color = "Acid Detergent Lignin (%)") +
theme_minimal()
ggplot(dat, aes(x = burn_frequ, y = ADL_perc)) +
geom_point() +
geom_smooth(method = "lm", color = "cadetblue4") +
labs(title = "Acid Detergent Lignin (%) vs Burn Frequency",
x = "Burn Frequency",
y = "Acid Detergent Lignin (%)") +
theme_minimal()
clean_dat <- dat %>%
select(plot, nonstructural_perc, ADL_perc, burn_frequ) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(burn_frequ))
dim(clean_dat)
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
clean_dat <- dat %>%
select(plot, nonstructural_perc, ADL_perc, burn_frequ) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(burn_frequ))
ggplot(dat, aes(x = plot, y = nsc_perc)) +
geom_violin(aes(fill = plot), color = "black") +
labs(
title = "Nonstructural Carbohydrates by Plot",
x = "Plot",
y = "Nonstructural Carbohydrates (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(dat, aes(x = plot, y = nonstructural_perc)) +
geom_violin(aes(fill = plot), color = "black") +
labs(
title = "Nonstructural Carbohydrates by Plot",
x = "Plot",
y = "Nonstructural Carbohydrates (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(clean_dat, aes(x = plot, y = nonstructural_perc)) +
geom_violin(aes(fill = plot), color = "black") +
labs(
title = "Nonstructural Carbohydrates by Plot",
x = "Plot",
y = "Nonstructural Carbohydrates (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
enhanced_stripchart(nonstructural_perc ~ plot, data = clean_dat) +
labs(y = "Latency(seconds)")
enhanced_stripchart(nonstructural_perc ~ plot, data = clean_dat) +
labs(x = "Plot #",
y = "Nonstructural Carbohydrates (%)")
lmer_model <- lmer(nsc_perc ~ burn_frequ * ADL_perc + (1 | plot), data = dat)
lmer_model <- lmer(nonstructural_perc ~ burn_frequ * ADL_perc + (1 | plot), data = dat)
summary(lmer_model)
lmer_model <- lmer(nonstructural_perc ~  ADL_perc + (1 | plot), data = dat)
summary(lmer_model)
lmer_model <- lmer(nonstructural_perc ~ no_trees_alive_plot + burn_frequ * ADL_perc + (1 | plot), data = dat)
summary(lmer_model)
soil_model <- lmer(pH ~ nonstructural_perc + cellulose_perc + ADL_perc + N_perc + C_perc + (1 | plot), data = dat)
summary(soil_model)
soil_model_with_trees <- lmer(pH ~ nonstructural_perc + cellulose_perc + ADL_perc + N_perc + C_perc +
no_trees_alive_plot + DBH_tot_trees_alive_plot +
(1 | plot), data = dat)
summary(soil_model_with_trees)
soil_model_interaction <- lmer(pH ~ nonstructural_perc * no_trees_alive_plot +
cellulose_perc * DBH_tot_trees_alive_plot +
ADL_perc + N_perc + C_perc +
(1 | plot), data = dat)
# View the model summary
summary(soil_model_interaction)
dredge(lmer_model)
options(na.action = "na.fail")
dredge(lmer_model)
res_AIC <- dredge(lmer_model, rank = "AIC")
options(na.action = "na.fail")
res_AIC <- dredge(lmer_model, rank = "AIC")
res_AIC <- dredge(soil_model, rank = "AIC")
soil_model <- lmer(pH ~ nonstructural_perc + cellulose_perc + ADL_perc + N_perc + C_perc +
(1 | plot), data = dat)
clean_dat <- dat %>%
select(plot, pH, nonstructural_perc ,cellulose_perc ,ADL_perc , N_perc ,C_perc) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(burn_frequ))
clean_dat <- dat %>%
select(plot, pH, nonstructural_perc ,cellulose_perc ,ADL_perc , N_perc ,C_perc) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc))
dim(clean_dat)
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
clean_dat <- dat %>%
select(plot, pH, nonstructural_perc ,cellulose_perc ,ADL_perc , N_perc ,C_perc) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(pH) & !is.na(cellulose_perc))
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
soil_model <- lmer(pH ~ nonstructural_perc + cellulose_perc + ADL_perc + N_perc + C_perc +
(1 | plot), data = dat)
soil_model <- lmer(pH ~ nonstructural_perc + cellulose_perc + ADL_perc + N_perc + C_perc +
(1 | plot), data = clean_dat)
options(na.action = "na.fail")
res_AIC <- dredge(soil_model, rank = "AIC")
dim(res_AIC)
res_AIC
lmer_model <- lmer(nonstructural_perc ~ no_trees_alive_plot + burn_frequ * ADL_perc + (1 | plot), data = dat)
clean_dat <- dat %>%
select(plot, burn_frequ, pH, nonstructural_perc ,cellulose_perc ,ADL_perc , N_perc ,C_perc) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(pH) & !is.na(cellulose_perc))
dim(clean_dat)
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
lmer_model <- lmer(nonstructural_perc ~ no_trees_alive_plot + burn_frequ * ADL_perc + (1 | plot), data = dat)
lmer_model <- lmer(nonstructural_perc ~ burn_frequ * ADL_perc + (1 | plot), data = dat)
lmer_model <- lmer(nonstructural_perc ~ burn_frequ * ADL_perc + (1 | plot), data = clean_dat)
res_AIC <- dredge(lmer_model, rank = "AIC")
dim(res_AIC)
res_AIC
lmer_model <- lmer(nonstructural_perc ~ burn_frequ + ADL_perc + (1 | plot), data = clean_dat)
options(na.action = "na.fail")
res_AIC <- dredge(lmer_model, rank = "AIC")
res_AIC
summary(lmer_model)
summary(lmer_model)
plot(allEffects(NSC_model, residuals = T), grid = T)
ggplot(dat, aes(x = ADL_perc, y = nonstructural_perc, color = burn_frequ)) +
geom_point() +
geom_smooth(method = "lm", aes(color = burn_frequ), se = FALSE) +
labs(title = "Nonstructural Carbohydrates vs Acid Detergent Lignin by Burn Frequency",
x = "Acid Detergent Lignin (%)",
y = "Nonstructural Carbohydrates (%)",
color = "Burn frequency (Fire/yr)") +
theme_minimal()
ggplot(dat, aes(x = burn_frequ, y = nonstructural_perc, color = ADL_perc)) +
geom_point() +
geom_smooth(method = "lm", color = "cadetblue4") +
labs(title = "Nonstructural Carbohydrates vs Burn Frequency",
x = "Burn Frequency",
y = "Nonstructural Carbohydrates (%)",
color = "Acid Detergent Lignin (%)") +
theme_minimal()
ggplot(dat, aes(x = burn_frequ, y = ADL_perc)) +
geom_point() +
geom_smooth(method = "lm", color = "cadetblue4") +
labs(title = "Acid Detergent Lignin (%) vs Burn Frequency",
x = "Burn Frequency",
y = "Acid Detergent Lignin (%)") +
theme_minimal()
enhanced_stripchart(nonstructural_perc ~ plot, data = clean_dat) +
labs(x = "Plot #",
y = "Nonstructural Carbohydrates (%)")
NSC_model <- lmer(nonstructural_perc ~ burn_frequ + ADL_perc + (1 | plot), data = clean_dat)
summary(lmer_model)
plot(allEffects(NSC_model, residuals = T), grid = T)
resid_panel(NSC_model, "R")
plot(NSC_model)
NSC_model <- lmer(nonstructural_perc ~ burn_frequ + ADL_perc + (1 | plot), data = clean_dat)
summary(lmer_model)
summary(NSC_model)
plot(allEffects(NSC_model, residuals = T), grid = T)
plot(NSC_model)
resid_panel(NSC_model, "R")
resid_panel(model = NSC_model, "R")
plot(NSC_model)
library(lme4)
plot(NSC_model)
# Resid vs Fitted
ggplot(data = NULL, aes(x = fitted(NSC_model), y = resid(NSC_model))) +
geom_point() +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Residuals vs Fitted",
x = "Fitted values",
y = "Residuals") +
theme_minimal()
# Q-Q
ggplot(data = NULL, aes(sample = resid(NSC_model))) +
stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q plot of Residuals") +
theme_minimal()
# Scale-Location plot
ggplot(data = NULL, aes(x = fitted(NSC_model), y = sqrt(abs(resid(NSC_model))))) +
geom_point() +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Scale-Location plot",
x = "Fitted values",
y = "Sqrt of |Residuals|") +
theme_minimal()
# Residuals vs Leverage
ggplot(data = NULL, aes(x = hatvalues(NSC_model), y = resid(NSC_model))) +
geom_point() +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Residuals vs Leverage",
x = "Leverage (Hat values)",
y = "Residuals") +
theme_minimal()
#Cook's Distance
cooksd <- cooks.distance(NSC_model)
ggplot(data = NULL, aes(x = 1:length(cooksd), y = cooksd)) +
geom_point() +
geom_hline(yintercept = 4 / length(cooksd), color = "red", linetype = "dashed") +
labs(title = "Cook's Distance",
x = "Index",
y = "Cook's Distance") +
theme_minimal()
(p1+p2) / (p3+p4)
# Resid vs Fitted
p1 <- ggplot(data = NULL, aes(x = fitted(NSC_model), y = resid(NSC_model))) +
geom_point() +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Residuals vs Fitted",
x = "Fitted values",
y = "Residuals") +
theme_minimal()
# Q-Q
p2 <- ggplot(data = NULL, aes(sample = resid(NSC_model))) +
stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q plot of Residuals") +
theme_minimal()
# Scale-Location
p3 <- ggplot(data = NULL, aes(x = fitted(NSC_model), y = sqrt(abs(resid(NSC_model))))) +
geom_point() +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Scale-Location plot",
x = "Fitted values",
y = "Sqrt of |Residuals|") +
theme_minimal()
# Residuals vs Leverage
p4 <- ggplot(data = NULL, aes(x = hatvalues(NSC_model), y = resid(NSC_model))) +
geom_point() +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Residuals vs Leverage",
x = "Leverage (Hat values)",
y = "Residuals") +
theme_minimal()
(p1+p2) / (p3+p4)
library(modelsummary)
data_summary <- datasummary_balance( ~ burn_frequ,
data = clean_dat,
stars = TRUE,
dinm = FALSE
)
cat("Table 1: Data Based on Burn Frequency Levels")
print(data_summary)
library(mi)
tdf <- missing_data.frame(as.data.frame(dat))
tdf <- missing_data.frame(as.data.frame(dat))
image(tdf)
clean_dat <- dat %>%
select(plot, nonstructural_perc, ADL_perc, burn_frequ) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(burn_frequ))
clean_dat <- dat %>%
select(plot, burn_frequ, pH, nonstructural_perc ,cellulose_perc ,ADL_perc , N_perc ,C_perc) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(pH) & !is.na(cellulose_perc))
clean_dat <- dat %>%
select(plot, burn_frequ, pH, nonstructural_perc ,cellulose_perc ,ADL_perc , N_perc ,C_perc) %>%
mutate(factor(plot)) %>%
filter(!is.na(nonstructural_perc) & !is.na(ADL_perc) & !is.na(pH) & !is.na(cellulose_perc))
dim(clean_dat)
tdf1 <- missing_data.frame(as.data.frame(clean_dat))
image(tdf1)
summary(NSC_model)
data_summary <- datasummary_balance( nonstructural_perc + ADL_perc ~ burn_frequ,
data = clean_dat,
stars = TRUE,
dinm = FALSE
)
cat("Table 1: Data Based on Burn Frequency Levels")
print(data_summary)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(mosaic)
library(ggmosaic)
library(remotes) #Needed for next two installs from github:
#Re-comment this after running it once:
#remotes::install_github("greenwood-stat/ggResidpanel")
library(ggResidpanel)
#remotes::install_github("greenwood-stat/catstats2")
library(catstats2)
library(gtsummary)
library(lubridate)
library(patchwork)
library(MuMIn)
library(lmerTest)
library(cetcolor)
library(ggrepel)
library(readxl)
moth <- read_excel("moths.xlsx",
sheet = "complete_dataset_MAIN FAMILIES.",
na = "NA")
moth <- read_excel("moths.xlsx",
sheet = "complete_dataset_MAIN FAMILIES.",
na = "NA")
library(lubridate)
moth <- moth %>% mutate(Date = factor(ymd(Date))) %>% dplyr::select(-Sunset_time)
moth2 <- moth %>% drop_na(Date, ID, Location, Treatment, Treatment_y_n, Colour, Spectra, Moon_Phase, Temp, Wind_speed_ms, Humidity, Common_name, Latin_name, Family, Sub_family, Latency) #Slight change from prior HW to keep more observations!
moth2 <- moth2 %>% mutate(Treatment = fct_recode(factor(Treatment),
"Cold Phosphor" = "1",
"Warm Phosphor" = "2",
"Cold RGB" = "3",
"Warm RGB" = "4"), #5 recoding not needed - controls dropped
logLatency = log(Latency))
library(readxl)
moth <- read_excel("moths.xlsx",
sheet = "complete_dataset_MAIN FAMILIES.",
na = "NA")
library(lubridate)
moth <- moth %>% mutate(Date = factor(ymd(Date))) %>% dplyr::select(-Sunset_time)
moth2 <- moth %>% drop_na(Date, ID, Location, Treatment, Treatment_y_n, Colour, Spectra, Moon_Phase, Temp, Wind_speed_ms, Humidity, Common_name, Latin_name, Family, Sub_family, Latency) #Slight change from prior HW to keep more observations!
moth2 <- moth2 %>% mutate(Treatment = fct_recode(factor(Treatment),
"Cold Phosphor" = "1",
"Warm Phosphor" = "2",
"Cold RGB" = "3",
"Warm RGB" = "4"), #5 recoding not needed - controls dropped
logLatency = log(Latency))
moth2 <- moth2 %>% mutate(Treatment = fct_recode(factor(Treatment),
"Cold Phosphor" = "1",
"Warm Phosphor" = "2",
"Cold RGB" = "3",
"Warm RGB" = "4"), #5 recoding not needed - controls dropped
logLatency = log(Latency))
View(moth2)
moth <- moth %>% mutate(Date = factor(ymd(Date))) %>% dplyr::select(-Sunset_time)
library(readxl)
moth <- read_excel("moths.xlsx",
sheet = "complete_dataset_MAIN FAMILIES.",
na = "NA")
library(lubridate)
moth <- moth %>% mutate(Date = factor(ymd(Date))) %>% dplyr::select(-Sunset_time)
moth2 <- moth %>% drop_na(Date, ID, Location, Treatment, Treatment_y_n, Colour, Spectra, Moon_Phase, Temp, Wind_speed_ms, Humidity, Common_name, Latin_name, Family, Sub_family, Latency) #Slight change from prior HW to keep more observations!
moth2 <- moth2 %>% mutate(Treatment = fct_recode(factor(Treatment),
"Cold Phosphor" = "1",
"Warm Phosphor" = "2",
"Cold RGB" = "3",
"Warm RGB" = "4"), #5 recoding not needed - controls dropped
logLatency = log(Latency))
enhanced_stripchart(logLatency ~ Moon_Phase, data = moth2) + labs(y = "Log-
Latency ()")
enhanced_stripchart(logLatency ~ Moon_Phase, data = moth2) + labs(y = "Log-Latency ()")
enhanced_stripchart(logLatency ~ Moon_Phase, data = moth2) +
labs(y = "Latency (log seconds)")
lmFull <- lm(logLatency ~ Humidity * Temp + Wind_speed_ms + Moon_Phase + Treatment, data = moth2)
summary(lmFull)
lmFull %>% tbl_regression(intercept = T)
plot(allEffects(lmFull, residuals = T), grid = T)
options(na.action = "na.fail")
Fullres <- dredge(lmFull, rank = "AIC", fixed = "Treatment")
Fullres
dim(Fullres)
Fullres
lmR1 <- lm(logLatency ~ Humidity + Treatment, data = moth2)
summary(lmR1)
Anova(lmR1)
lmerFull <- lmer(logLatency ~ Humidity * Temp + Wind_speed_ms + Moon_Phase + Treatment + (1|Family/Sub_family), data = moth2, REML = F)
dredge(lmerFull, fixed = "Treatment", rank = "AIC")
lmer_final <- lmer(logLatency ~ Moon_Phase + Treatment + (1|Family/Sub_family), data = moth2)
plot(allEffects(lmer_final, residuls = T), grid = T)
plot(allEffects(lmer_final, residuals = T), grid = T)
moth3 <- moth %>% drop_na(Date, ID, Location, Treatment, Treatment_y_n, Colour, Spectra, Moon_Phase, Temp, Wind_speed_ms, Humidity, Common_name, Latin_name, Family, Sub_family, Fly_Into_Light) #Slight change from prior HW to keep more observations!
moth3 <- moth3 %>% mutate(Treatment = fct_recode(factor(Treatment),
"Cold Phosphor" = "1",
"Warm Phosphor" = "2",
"Cold RGB" = "3",
"Warm RGB" = "4"), #5 recoding not needed - controls dropped
Fly_Into_Light = factor(Fly_Into_Light))
glmT <- glm(Fly_Into_Light ~ Treatment, data = moth3, family = binomial)
summary(glmT)
plot(allEffects(glmT), grid = T, type = "link")
plot(allEffects(glmT), grid = T, type = "response")
glmerFull <- glmer(Fly_Into_Light ~ Humidity * Temp + Wind_speed_ms + Moon_Phase + Treatment + (1|Family/Sub_family), data = moth3, family = binomial)
summary(glmerFull)
d1 <- dredge(glmerFull, rank = "BIC")
d1
