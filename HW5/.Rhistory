knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
options(show.signif.stars = FALSE)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(readxl)
library(mosaic)
library(catstats2)
library(easyalluvial)
library(emmeans)
library(patchwork)
library(plotly)
library(modelsummary)
library(ggmosaic)
library(ggResidpanel)
theme_set(theme_bw()) #Prevents need for + theme_bw() in ggplots
plot(allEffects(river3, grid = T, residuals = T))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
options(show.signif.stars = FALSE)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(readxl)
library(mosaic)
library(catstats2)
library(easyalluvial)
library(emmeans)
library(patchwork)
library(plotly)
library(modelsummary)
library(ggmosaic)
library(ggResidpanel)
theme_set(theme_bw()) #Prevents need for + theme_bw() in ggplots
library(readxl)
riverdata <- read_excel("Qu_etal_2017.xlsx")
riverdataR <- riverdata %>% dplyr::filter(River != "Indus") %>%
mutate(logpCO2 = log(pCO2))
enhanced_stripchart(pCO2 ~ River, data = riverdataR) + labs(y = "Partial CO2 pressure (\u03BCatm)")
ggplot(data = riverdataR, mapping = aes(x = Elevation, y = pCO2, color = River)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(col = "red", lty =2, se = F) +
labs(x = "Elevation (m)",
y = "Partial CO2 pressure (\u03BCatm)",
title = "Scatterplot of pCO2 vs Elevation by River")
ggplot(data = riverdataR, mapping = aes(x = Elevation, y = pCO2)) +
geom_point() +
geom_smooth(method = "lm") +
geom_smooth(col = "red", lty =2, se = F) +
facet_wrap(~ River) +
scale_color_viridis(discrete = TRUE) +
labs(x = "Elevation (m)",
y = "Partial CO2 pressure (\u03BCatm)",
title = "Scatterplot of pCO2 vs Elevation by River")
river1 <- lm(pCO2 ~ River*Elevation, data = riverdataR)
ggResidpanel::resid_panel(river1, "R")
river2 <- lm(logpCO2 ~ River*Elevation, data = riverdataR)
ggResidpanel::resid_panel(river2, "R")
plot(allEffects(river2, grid = T, residuals = T))
river3 <- lm(logpCO2 ~ River + Elevation, data = riverdataR)
ggResidpanel::resid_panel(river3, "R")
plot(allEffects(river3, grid = T, residuals = T))
resid_panel(river1, "R")
?resid_panel
resid <- ggResidpanel::resid_panel(river1, "R")
interactive_resid <- ggplotly(resid)
interactive_resid
resid <- resid_panel(river1, "R")
interactive_resid <- ggplotly(resid)
interactive_resid
resid_interact(river1, "R")
river3 <- lm(pCO2 ~ River + Elevation, data = riverdataR)
ggResidpanel::resid_panel(river3, "R")
river3 <- lm(logpCO2 ~ River + Elevation, data = riverdataR)
ggResidpanel::resid_panel(river3, "R")
resid_interact(river3, "R")
modelsummary(river3)
summary(river3)
river3 %>% tbl_regression(intercept = T)
summary(river3)
ggResidpanel::resid_panel(river1, "R")
ggResidpanel::resid_panel(river2, "R")
ggResidpanel::resid_panel(river3, "R")
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(readxl)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
options(show.signif.stars = FALSE)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(readxl)
library(mosaic)
library(catstats2)
library(ggResidpanel)
library(easyalluvial)
library(emmeans)
library(patchwork)
library(plotly)
library(modelsummary)
library(ggmosaic)
library(ggrepel)
library(cetcolor)
library(MuMIn)
theme_set(theme_bw()) #Prevents need for + theme_bw() in ggplots
s
data(snowdepths)
snowdepths <- snowdepths %>%
mutate(AspectCat = factor(case_when(
aspect %in% (0:45)~ "North",
aspect %in% (315:360)~ "North",
aspect %in% 45:(90+45) ~ "East",
aspect %in% (90+45):(180+45) ~ "South",
aspect %in% (180+45):315 ~ "West"
)),
SnowPresence = factor(case_when(
snow == 0 ~ "None",
snow > 0 ~ "Some"
)),
Landf = factor(cover),
Landf = fct_recode(Landf,
"Not Forested" = "0",
"Forested" = "10")
)
snowdepthsR <- snowdepths %>% drop_na(density)
lmA <- lm(density ~ rad + snow + elev + AspectCat, data = snowdepthsR)
set.seed(123)
resid_calibrate(lmA, nsim = 4, c("qq","hist"), identify = T, shuffle = T, coordfix = F)
ggcorrplot(snowdepthsR %>% dplyr::select(density, rad, snow, elev, swe) %>% cor(), lab = T)
lmB <- lm(density ~ rad + snow + elev + AspectCat + cover + swe, data = snowdepthsR)
vif(lmB)
library(performance)
check_collinearity(lmB)
lmRad <- lm(density ~ radiation, data = snowdepthsR)
View(snowdepthsR)
lmElev <- lm(density ~ elev, data = snowdepthsR)
lmmeanonly <- lm(density ~ 1, data = snowdepthsR)
lmRad <- lm(density ~ rad, data = snowdepthsR)
lmSnoDep <- lm(density ~ snow, data = snowdepthsR)
lmSlopeAngle <- lm(density ~ angle, data = snowdepthsR)
lmElevRad <- lm(density ~ elev + rad, data = snowdepthsR)
lmSDRad <- lm(density ~ snow + rad, data = snowdepthsR)
lmADD <- (lm(density ~ elev + rad + snow + angle + AspectCat,
data = snowdepthsR))
d1 <- model.sel(list(lmElev, lmmeanonly, lmRad, lmSnoDep,
lmSlopeAngle, lmElevRad, lmSDRad, lmADD),
rank = "AIC")
d1
ggdredgeplot(d1)
d1
options(na.action = "na.fail") #need to run this before dredge !
dredge(lmADD, rank = "AIC")
dim(res_AIC) #the rows = number of models explored
res_AIC <- dredge(lmADD, rank = "AIC")
dim(res_AIC) #the rows = number of models explored
subset(res_AIC, delta < 2)
topAICmodel <- eval(attributes(res_AIC)$model.calls$`29`)
topAICmodel$coefficients
ggdredgeplot(d1) ##this is in catstats2
ggdredgeplotly(d1)
set.seed(123)
resid_calibrate(lmA, nsim = 4, c("qq","hist"), identify = T, shuffle = T, coordfix = F)
resid_calibrate(lmA, c("resid", "ls"), nsim = 4, identify = T, shuffle = T)
lmElev <- lm(density ~ elev, data = snowdepthsR)
lmmeanonly <- lm(density ~ 1, data = snowdepthsR)
lmRad <- lm(density ~ rad, data = snowdepthsR)
lmSnoDep <- lm(density ~ snow, data = snowdepthsR)
lmSlopeAngle <- lm(density ~ angle, data = snowdepthsR)
lmElevRad <- lm(density ~ elev + rad, data = snowdepthsR)
lmSDRad <- lm(density ~ snow + rad, data = snowdepthsR)
lmADD <- (lm(density ~ elev + rad + snow + angle + AspectCat,
data = snowdepthsR))
d1 <- model.sel(list(lmElev, lmmeanonly, lmRad, lmSnoDep,
lmSlopeAngle, lmElevRad, lmSDRad, lmADD),
rank = "AIC")
d1
ggdredgeplot(d1) ##this is in catstats2
d1
options(na.action = "na.fail") #need to run this before dredge !
res_AIC <- dredge(lmADD, rank = "AIC")
dim(res_AIC) #the rows = number of models explored
subset(res_AIC, delta < 2)
topAICmodel <- eval(attributes(res_AIC)$model.calls$`29`)
topAICmodel$coefficients
ggdredgeplot(d1) ##this is in catstats2
d1
options(na.action = "na.fail") #need to run this before dredge !
res_AIC <- dredge(lmADD, rank = "AIC")
dim(res_AIC) #the rows = number of models explored
subset(res_AIC, delta < 2)
res_AIC
topAICmodel <- eval(attributes(res_AIC)$model.calls$`29`)
topAICmodel$coefficients
topAICmodel$effects
topAICmodel
subset(res_AIC, delta < 2)
topAICmodel$coefficients
topAICmodel
ggdredgeplot(res_AIC)
AIC_2 <- subset(res_AIC, delta < 2)
AIC_2
ggdredgeplot(AIC_2)
?ggdredgeplot
ggdredgeplot(res_AIC, deltasubset = <2)
ggdredgeplot(res_AIC, deltasubset = 2)
ggdredgeplot(res_AIC, deltasubset = 2)
ggdredgeplot(res_AIC, deltasubset = 2)
fortable1 <- riverdataR %>% dplyr::select(
`Partial CO2 Pressure` = pCO2,
`Elevation` = Elevation,
`River` = River
)
table1 <- datasummary_balance(~River, data = fortable1,
title = "Table 1. Summary Statistics",
stars = F,
dinm = T)
table1
