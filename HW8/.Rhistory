library(dplyr)
library(catstats2)
?model_diagram
library(ggplot2)
library(ggplot2)
library(ggthemes)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(mosaic)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(mosaic)
library(ggmosaic)
library(remotes)
library(remotes)
library(ggResidpanel)
library(car)
library(effects)
library(mosaic)
library(ggmosaic)
library(remotes)
library(ggResidpanel)
library(catstats2)
library(remotes)
library(ggResidpanel)
library(catstats2)
library(gtsummary)
library(lubridate)
library(patchwork)
library(patchwork)
library(MuMIn)
library(lmerTest)
library(cetcolor)
library(ggrepel)
library(easyalluvial)
library(easyalluvial)
library(emmeans)
library(readxl)
moth <- read_excel("moths.xlsx",
sheet = "complete_dataset_MAIN FAMILIES.",
na = "NA")
library(lubridate)
moth <- moth %>% mutate(Date = factor(ymd(Date))) %>% dplyr::select(-Sunset_time)
moth2 <- moth %>% drop_na(Date, ID, Location, Treatment, Treatment_y_n, Colour, Spectra, Moon_Phase, Temp, Wind_speed_ms, Humidity, Common_name, Latin_name, Family, Sub_family, Latency) #Slight change from prior HW to keep more observations!
moth2 <- moth2 %>% mutate(Treatment = fct_recode(factor(Treatment),
"Cold Phosphor" = "1",
"Warm Phosphor" = "2",
"Cold RGB" = "3",
"Warm RGB" = "4"), #5 recoding not needed - controls dropped
logLatency = log(Latency),
Colour = factor(Colour),
Spectra = factor(Spectra),
Family = factor(Family))
View(moth2)
moth2 %>% dplyr::select(Colour, Spectra, Family) %>% alluvial_wide(fill_by = "last_variable")
tally(Spectra ~ Colour|Family, data = moth2)
ggintplot(response = "logLatency", groupvars = c("Colour", "Spectra"), data = moth2)
enhanced_stripchart(logLatency ~ Family, data = moth2) + labs(y = "Latency time (log s)")
moth2 %>% dplyr::select(Colour, Spectra, Family) %>% alluvial_wide(fill_by = "last_variable")
lm1 <- lm(logLatency ~ Colour*Spectra + Family, data = moth2)
summary(lm1)
lm1 %>% tbl_regression(intercept = T)
Anova(lm1, type = "III")
resid_panel(lm1, "R")
citation(ggintplot())
?citation
citation(package = "ggint")
?ggintplot
citation(catstats2)
citation(package = "catstats2")
citation()
version()
version
citation()
?ggresidpanel
citation(ggplot2)
citation(package = "ggplot2")
lm1 <- lm(logLatency ~ Colour*Spectra + Family, data = moth2)
summary(lm1)
lm1 %>% tbl_regression(intercept = T)
Anova(lm1, type = "III")
tukey_results <- TukeyHSD(lm1, "Colour:Spectra")
summary(tukey_results)
tukey_results <- TukeyHSD(aov(lm1), "Colour:Spectra")
summary(tukey_results)
aov_model <- aov(lm1)
summary(aov_model)
Anova(lm1, type = "III")
aov_model <- aov(lm1)
summary(aov_model)
tukey_results <- TukeyHSD(aov_model, "Colour:Spectra")
summary(tukey_results)
tukey_results <- TukeyHSD(aov(lm1))
summary(tukey_results)
moth2 <- moth2 %>% mutate(Treatment = fct_recode(factor(Treatment),
"Cold Phosphor" = "1",
"Warm Phosphor" = "2",
"Cold RGB" = "3",
"Warm RGB" = "4"),
logLatency = log(Latency),
Colour = factor(Colour),
Spectra = factor(Spectra),
Family = factor(Family))
moth2 %>% dplyr::select(Colour, Spectra, Family) %>% alluvial_wide(fill_by = "last_variable")
lm1 <- lm(logLatency ~ Colour*Spectra + Family, data = moth2)
summary(lm1)
tukey_results <- TukeyHSD(aov(lm1))
summary(tukey_results)
str(moth2$Colour)
?lm
citation(package = "lm")
citation(package = "stats")
moth2 %>% dplyr::select(Colour, Spectra, Family) %>% alluvial_wide(fill_by = "last_variable")
tally(Spectra ~ Colour|Family, data = moth2)
ggintplot(response = "logLatency", groupvars = c("Colour", "Spectra"), data = moth2)
enhanced_stripchart(logLatency ~ Family, data = moth2) + labs(y = "Latency time (log s)")
lm1 <- lm(logLatency ~ Colour*Spectra + Family, data = moth2)
summary(lm1)
lm1 %>% tbl_regression(intercept = T)
lm1 %>% tbl_regression(intercept = T)
Anova(lm1, type = "III")
resid_panel(lm1, "R")
tally(Spectra ~ Colour|Family, data = moth2)
tukey_results <- TukeyHSD(lm1
tukey_results <- TukeyHSD(lm1)
summary(tukey_results)
tukey_results <- TukeyHSD(lm1)
summary(tukey_results)
plot(allEffects(lm1, residuals = T), residuals.color = "darkgrey", lwd = 2, band.colors = "red", band.transparency = 0.1, residuals.pch = 16, residuals.cex = 0.1)
plot(allEffects(lm1, residuals = T), lwd = 2, band.colors = "red", band.transparency = 0.1, residuals.pch = 16, residuals.cex = 0.1)
plot(allEffects(lm1, residuals = T), lwd = 2, band.colors = "red", band.transparency = 0.1, residuals.pch = 16)
plot(allEffects(lm1, residuals = T), lwd = 2, band.transparency = 0.1, residuals.pch = 16)
plot(allEffects(lm1, residuals = T), lwd = 2, band.transparency = 0.1, residuals.pch = 14)
emA <- emmeans(lm1, pairwise ~ Colour * Spectra, adjust = "tukey")
summary(emA)
confint(emA)
summary(emA)
lm1 %>% tbl_regression(intercept = T)
summary(lm1)
lm1 %>% tbl_regression(intercept = T)
summary(emA)
confint(emA)
summary(lm1)
Anova(lm1, type = "III")
summary(lm1)
lm1 %>% tbl_regression(intercept = T)
summary(lm1)
lm1 %>% tbl_regression(intercept = T)
?emmeans
citation(package = "emmeans")
emA <- emmeans(lm1, pairwise ~ Colour * Spectra, adjust = "tukey")
summary(emA)
confint(emA)
summary(emA)
enhanced_stripchart(logLatency ~ Family, data = moth2) + labs(y = "Latency time (log s)")
enhanced_stripchart(logLatency ~ Family, data = moth2) + labs(y = "Latency time (log seconds)")
confint(emA)
?tbl_regression
?gtsummary
?all_contrasts
lm1 %>% gtsummary::all_contrasts(contrasts_type = c(Spectra, Colour))
summary(emA)
confint(emA)
summary(emA)
summary(lm1)
summary_table <- emA_summary %>%
left_join(emA_confint, by = c("contrast" = "contrast")) %>%
select(contrast, estimate, SE, df, t.ratio, p.value, lower.CL, upper.CL)
emA <- emmeans(lm1, pairwise ~ Colour * Spectra, adjust = "tukey")
emA_summary <- summary(emA)
emA_confint <- confint(emA)
summary_table <- emA_summary %>%
left_join(emA_confint, by = c("contrast" = "contrast")) %>%
select(contrast, estimate, SE, df, t.ratio, p.value, lower.CL, upper.CL)
summary_table <- data.frame(
contrast = emA_summary$contrast,
estimate = emA_summary$estimate,
SE = emA_summary$SE,
df = emA_summary$df,
t_ratio = emA_summary$t.ratio,
p_value = emA_summary$p.value,
lower_CL = emA_confint$lower.CL,
upper_CL = emA_confint$upper.CL
)
emA_summary
summary_table <- data.frame(
contrast = emA_summary$contrast,
estimate = emA_summary$estimate,
SE = emA_summary$SE,
df = emA_summary$df,
t_ratio = emA_summary$t.ratio,
p_value = emA_summary$p.value
)
