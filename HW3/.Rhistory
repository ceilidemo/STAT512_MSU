library(mosaic)
library(easyalluvial)
library(catstats2)
library(ggResidpanel)
theme_set(theme_bw()) #Prevents need for + theme_bw() in ggplots
data(TendonData)
tendon <- TendonData
tendonN <- tendon %>%
rename(SubjectID = 'Subject ID',
Sex = 'Sex  (M=1)',
CurrPain = 'CurrPain (Y=1)',
WaisttoHip = 'Waist to Hip',
VISAA = 'VISA-A',
Neovascularization = 'Neovascularization (Doppler) (Y=1)',
HistPain = 'Hx Pain (Y=1)')
tendonna2 <- tendonna2 %>% mutate(PainCombs2 = factor(PainCombs),
(fct_recode(PainCombs2,
"0" = "NoPain",
"1" = "CurrentPain",
"10" = "HistPain",
"11" = "Pain")))
enhanced_stripchart(PSFR ~ PainCombs2, data = tendonna2)
data(TendonData)
tendon <- TendonData
tendonN <- tendon %>%
rename(SubjectID = 'Subject ID',
Sex = 'Sex  (M=1)',
CurrPain = 'CurrPain (Y=1)',
WaisttoHip = 'Waist to Hip',
VISAA = 'VISA-A',
Neovascularization = 'Neovascularization (Doppler) (Y=1)',
HistPain = 'Hx Pain (Y=1)')
tendonN <- tendon %>%
rename(SubjectID = 'Subject ID',
Sex = 'Sex  (M=1)',
CurrPain = 'CurrPain (Y=1)',
WaisttoHip = 'Waist to Hip',
VISAA = 'VISA-A',
Neovascularization = 'Neovascularization (Doppler) (Y=1)',
HistPain = 'Hx Pain (Y=1)')
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(tidyverse)
library(car)
library(effects)
library(gtsummary)
library(mosaic)
library(easyalluvial)
library(catstats2)
library(ggResidpanel)
data(TendonData)
tendon <- TendonData
tendonN <- tendon %>%
rename(SubjectID = 'Subject ID',
Sex = 'Sex  (M=1)',
CurrPain = 'CurrPain (Y=1)',
WaisttoHip = 'Waist to Hip',
VISAA = 'VISA-A',
Neovascularization = 'Neovascularization (Doppler) (Y=1)',
HistPain = 'Hx Pain (Y=1)')
data(TendonData)
tendon <- TendonData
tendonN <- tendon %>%
rename(SubjectID = 'Subject ID',
Sex = 'Sex  (M=1)',
CurrPain = 'CurrPain (Y=1)',
WaisttoHip = 'Waist to Hip',
VISAA = 'VISA-A',
Neovascularization = 'Neovascularization (Doppler) (Y=1)',
HistPain = 'Hx Pain (Y=1)')
View(tendon)
tendonF <- tendonN %>%
mutate(across(where(~ is.character(.x)), as.factor))
tendonF <- tendonF %>%
mutate(CurrPain = factor(CurrPain),
HistPain = factor(HistPain),
Neovascularization = factor(Neovascularization),
Sex = factor(Sex),
Sex = fct_recode(Sex,
"Female" = "0",
"Male" = "1"),
Location = factor(substr(SubjectID, 1, 3)),
PainCombs =  as.numeric(str_c(HistPain, CurrPain))
)
tendonna1 <- tendonF %>% drop_na(CSA)
tendonna2 <- tendonF %>% drop_na()
tendon <- TendonData
View(tendon)
tendonF <- tendon %>%
mutate(across(where(~ is.character(.x)), as.factor))
tendonF <- tendonF %>%
mutate(CurrPain = factor(CurrPain),
HistPain = factor(HistPain),
Neovascularization = factor(Neovascularization),
Sex = factor(Sex),
Sex = fct_recode(Sex,
"Female" = "0",
"Male" = "1"),
Location = factor(substr(SubjectID, 1, 3)),
PainCombs =  as.numeric(str_c(HistPain, CurrPain))
)
tendonN <- tendon %>%
rename(SubjectID = 'Subject ID',
Sex = 'Sex  (M=1)',
CurrPain = 'CurrPain (Y=1)',
WaisttoHip = 'Waist to Hip',
VISAA = 'VISA-A',
Neovascularization = 'Neovascularization (Doppler) (Y=1)',
HistPain = 'Hx Pain (Y=1)')
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(sp)
library(raster)
library(sp)
library(raster)
library(RStoolbox)
library(rasterVis)
library(ggplot2)
library(terra)
library(raster)
library(RStoolbox)
install.packages("RStoolbox")
install.packages("rasterVis")
library(RStoolbox)
library(RStoolbox)
library(rasterVis)
library(ggplot2)
library(terra)
dem <- rast("./n45_w112_1arc_v3.tif")
dem
plot(dem)
plot(dem)
dem_utm <- project(dem, "EPSG:32612")
dem_utm <- project(dem, "EPSG:32612")
dem_utm
ggR(dem_utm, geom_raster = T) +
labs(x="Longitude", y="Latitude", fill = "Elevation")
ggR(dem_utm, geom_raster = T) +
labs(x="Longitude (m)", y="Latitude(m)", fill = "Elevation (m)")
ggR(dem_utm, geom_raster = T) +
labs(x="Longitude", y="Latitude", fill = "Elevation (m)")
slopi <- terrain(dem_utm, "slope", unit = "degrees", neighbors=8)
ggR(slopi, geom_raster = T) +
scale_fill_gradientn(colours = terrain.colors(5), name = "Slope (degrees)") +
labs(x = "Longitude", y = "Latitude")
aspect <- terrain(dem_utm, v="aspect", unit="degrees", neighbors=8)
ggR(aspect, geom_raster = TRUE) +
labs(x = "Longitude", y = "Latitude", fill = "Aspect Value (degrees)") +
scale_fill_viridis_c(option="C",
limits = c(0, 360),
breaks = c(0, 45, 90, 135, 180, 225, 270, 315),
labels = c("0° (North)", "45° (NE)", "90° (East)",
"135° (SE)", "180° (South)", "225° (SW)",
"270° (West)", "315° (NW)"))
library(spatialEco)
install.packages("spatialEco")
library(spatialEco)
plan_curve <- curvature(dem_utm, type="planform")
ggR(plan_curve, geom_raster = T) +
labs(x = "Longitude", y = "Latitude", fill = "Planform Curvature")
slope_rad <- terrain(dem_utm, v="slope", unit="radians")
asp_rad <- terrain(dem_utm, v="aspect", unit="radians")
hill <- shade(slope_rad, asp_rad, angle=45,direction = 0)
ggR(hill, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "")
ggR(hill, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "Hillshade Value")
flo <- terrain(dem_utm, v="flowdir")
ggR(flo, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "")
ggR(flo, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "Flow Direction")
ggR(flo, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "Flow Direction Value")
ggR(rug, geom_raster = T)+
labs(x="Longitude", y="Latitude", fill = "")
rug <- terrain(dem_utm, v="TRI")
ggR(rug, geom_raster = T)+
labs(x="Longitude", y="Latitude", fill = "")
?terrain
ggR(rug, geom_raster = T)+
labs(x="Longitude", y="Latitude", fill = "Terrain Ruggedness Index")
ggR(flo, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "Flow Direction Value")
decode_flow_direction <- function(value) {
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- sapply(encoding, function(x) {
if (value %% (x * 2) >= x) return(directions[which(encoding == x)])
return(NULL)
})
decoded <- decoded[!is.null(decoded)]
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
flow_direction_decoded <- raster::calc(flo, fun = decode_flow_direction)
flo <- terrain(dem_utm, v="flowdir")
decode_flow_direction <- function(value) {
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- sapply(encoding, function(x) {
if (value %% (x * 2) >= x) return(directions[which(encoding == x)])
return(NULL)
})
decoded <- decoded[!is.null(decoded)]
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
flow_direction_decoded <- app(flo, fun = decode_flow_direction)
decode_flow_direction <- function(value) {
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
# Flow direction encoding (combining directions)
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- character(0)
for (x in encoding) {
if (value %% (x * 2) >= x) {
decoded <- c(decoded, directions[which(encoding == x)])
}
}
# If there is no direction, return "No Flow"
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
# Apply decoding function to the entire raster (using 'app' in terra)
flow_direction_decoded <- app(flo, fun = decode_flow_direction)
decode_flow_direction <- function(value) {
# Directions corresponding to the flow encoding
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
# Flow direction encoding (bitwise combinations)
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- character(0)  # Initialize an empty character vector
# Check each encoding bit and append the corresponding direction
for (x in encoding) {
if (value %% (x * 2) >= x) {
decoded <- c(decoded, directions[which(encoding == x)])
}
}
# If no directions are decoded, return "No Flow"
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
# Apply decoding function to the entire raster (using 'app' in terra)
flow_direction_decoded <- app(flo, fun = decode_flow_direction)
flo <- terrain(dem_utm, v="flowdir")
decode_flow_direction <- function(value) {
# Directions corresponding to the flow encoding
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
# Flow direction encoding (bitwise combinations)
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- character(0)  # Initialize an empty character vector
# Check each encoding bit and append the corresponding direction
for (x in encoding) {
if (value %% (x * 2) >= x) {
decoded <- c(decoded, directions[which(encoding == x)])
}
}
# If no directions are decoded, return "No Flow"
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
# Apply decoding function to the entire raster (using 'app' in terra)
flow_direction_decoded <- app(flo, fun = decode_flow_direction)
decode_flow_direction <- function(value) {
# Directions corresponding to the flow encoding
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
# Flow direction encoding (bitwise combinations)
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- character(0)  # Initialize an empty character vector
# Ensure value is treated as a single number
if (length(value) > 1) {
stop("Input value is a vector, but a single value is expected!")
}
# Check each encoding bit and append the corresponding direction
for (x in encoding) {
if (value %% (x * 2) >= x) {
decoded <- c(decoded, directions[which(encoding == x)])
}
}
# If no directions are decoded, return "No Flow"
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
# Apply the decoding function to the entire raster (using 'app' in terra)
flow_direction_decoded <- app(flo, fun = decode_flow_direction)
decode_flow_direction <- function(value) {
# Directions corresponding to the flow encoding
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
# Flow direction encoding (bitwise combinations)
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- character(0)  # Initialize an empty character vector
# Check each encoding bit and append the corresponding direction
for (x in encoding) {
if (value %% (x * 2) >= x) {
decoded <- c(decoded, directions[which(encoding == x)])
}
}
# If no directions are decoded, return "No Flow"
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
# Apply the decoding function to the entire raster using 'map' in terra (works with individual cells)
flow_direction_decoded <- map(flo, fun = decode_flow_direction)
flo <- terrain(dem_utm, v="flowdir")
decode_flow_direction <- function(value) {
# Directions corresponding to the flow encoding
directions <- c("No Flow", "North", "East", "NorthEast", "South", "NorthWest", "SouthEast", "West", "SouthWest")
# Flow direction encoding (bitwise combinations)
encoding <- c(1, 2, 4, 8, 16, 32, 64, 128)
decoded <- character(0)  # Initialize an empty character vector
# Check each encoding bit and append the corresponding direction
for (x in encoding) {
if (value %% (x * 2) >= x) {
decoded <- c(decoded, directions[which(encoding == x)])
}
}
# If no directions are decoded, return "No Flow"
if (length(decoded) == 0) {
return("No Flow")
}
return(paste(decoded, collapse = ", "))
}
# Apply the decoding function to each cell in the raster using 'app' in terra
flow_direction_decoded <- app(flo, fun = function(x) decode_flow_direction(x))
flo <- terrain(dem_utm, v="flowdir")
ggR(flo, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "Flow Direction Value")
?terrain
rug <- terrain(dem_utm, v="TRI")
ggR(rug, geom_raster = T)+
labs(x="Longitude", y="Latitude", fill = "Terrain Ruggedness Index")
flo_discrete <- cut(flo, breaks = c(0, 1, 2, 4, 8, 16, 32, 64, 128),
labels = c("East", "Southeast", "South", "Southwest", "West",
"Northwest", "North", "Northeast"),
include.lowest = TRUE)
flo_values <- values(flo)
# Discretize the flow direction values
flo_discrete <- cut(flo_values, breaks = c(0, 1, 2, 4, 8, 16, 32, 64, 128),
labels = c("East", "Southeast", "South", "Southwest", "West",
"Northwest", "North", "Northeast"),
include.lowest = TRUE)
# Convert the discretized values back into a raster layer
flo_discrete_raster <- raster(flo)
# Plot the discretized flow directions
ggR(flo_discrete_raster, geom_raster = TRUE) +
labs(x = "Longitude", y = "Latitude", fill = "Flow Direction")
reclass_matrix <- matrix(c(
0, 1, 1,      # East
1, 2, 2,      # Southeast
2, 4, 4,      # South
3, 8, 8,      # Southwest
4, 16, 16,    # West
5, 32, 32,    # Northwest
6, 64, 64,    # North
7, 128, 128   # Northeast
), ncol = 3, byrow = TRUE)
# Reclassify the raster based on the flow direction values
flo_discrete_raster <- reclassify(flo, reclass_matrix)
# Define the reclassification matrix for D8 flow direction
reclass_matrix <- cbind(
0, 1, 1,      # East
1, 2, 2,      # Southeast
2, 4, 4,      # South
3, 8, 8,      # Southwest
4, 16, 16,    # West
5, 32, 32,    # Northwest
6, 64, 64,    # North
7, 128, 128   # Northeast
)
# Reclassify the SpatRaster using the reclassification matrix
flo_discrete_raster <- classify(flo, reclass_matrix)
ggR(flo, geom_raster = T)+
scale_fill_gradientn(colours = grey.colors(10))+
labs(x="Longitude", y="Latitude", fill = "Flow Direction Value")
flo_discrete <- factor(flo, levels = c(1, 2, 4, 8, 16, 32, 64, 128),
labels = c("East", "Southeast", "South", "Southwest",
"West", "Northwest", "North", "Northeast"))
# Plot the discretized flow directions with discrete colors
ggR(flo_discrete, geom_raster = TRUE) +
scale_fill_manual(values = c("East" = "red", "Southeast" = "orange", "South" = "yellow",
"Southwest" = "green", "West" = "blue", "Northwest" = "purple",
"North" = "pink", "Northeast" = "brown")) +
labs(x = "Longitude", y = "Latitude", fill = "Flow Direction")
flo_discrete_raster <- flo
values(flo_discrete_raster) <- as.numeric(flo_discrete)
# Plot the flow directions using ggR with discrete colors
ggR(flo_discrete_raster, geom_raster = TRUE) +
scale_fill_manual(values = c("1" = "red", "2" = "orange", "4" = "yellow",
"8" = "green", "16" = "blue", "32" = "purple",
"64" = "pink", "128" = "brown")) +
labs(x = "Longitude", y = "Latitude", fill = "Flow Direction")
View(rug)
flo_factor <- as.factor(flo)
# Assign levels to the factor that represent the discrete flow direction values
levels(flo_factor) <- c("East", "Southeast", "South", "Southwest", "West", "Northwest", "North", "Northeast")
# Plot the flow directions using ggR with a discrete color scale
ggR(flo_factor, geom_raster = TRUE) +
scale_fill_manual(values = c("East" = "red", "Southeast" = "orange", "South" = "yellow",
"Southwest" = "green", "West" = "blue", "Northwest" = "purple",
"North" = "pink", "Northeast" = "brown")) +
labs(x = "Longitude", y = "Latitude", fill = "Flow Direction")
ggR(flo_factor, geom_raster = TRUE) +
scale_fill_manual(values = c("East" = "red", "Southeast" = "orange", "South" = "yellow",
"Southwest" = "green", "West" = "blue", "Northwest" = "purple",
"North" = "pink", "Northeast" = "brown")) +
labs(x = "Longitude", y = "Latitude", fill = "Flow Direction")
reclass_matrix <- cbind(
1, 1, 1,      # East
2, 2, 2,      # Southeast
4, 4, 4,      # South
8, 8, 8,      # Southwest
16, 16, 16,   # West
32, 32, 32,   # Northwest
64, 64, 64,   # North
128, 128, 128 # Northeast
)
# Reclassify the flow direction values into categories
flo_discrete <- classify(flo, reclass_matrix)
aspect <- terrain(dem_utm, v="aspect", unit="degrees", neighbors=8)
ggR(aspect, geom_raster = TRUE) +
labs(x = "Longitude", y = "Latitude", fill = "Aspect Value (degrees)") +
scale_fill_viridis_c(option="C",
limits = c(0, 360),
breaks = c(0, 45, 90, 135, 180, 225, 270, 315),
labels = c("0° (North)", "45° (NE)", "90° (East)",
"135° (SE)", "180° (South)", "225° (SW)",
"270° (West)", "315° (NW)"))
setwd("~/OneDrive - Montana State University/STAT512/HW3")
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(tidyverse)
library(car)
library(effects)
library(tidyverse)
library(car)
library(effects)
library(mosaic)
library(remotes) #Needed for next two installs from github:
#Re-comment this after running it once:
#remotes::install_github("greenwood-stat/ggResidpanel")
library(ggResidpanel)
#remotes::install_github("greenwood-stat/catstats2")
library(catstats2)
library(gtsummary)
library(lubridate)
library(readxl)
moth <- read_excel("moths.xlsx",
sheet = "complete_dataset_MAIN FAMILIES.",
na = "NA")
library(lubridate)
moth <- moth %>%
mutate(Date = factor(ymd(Date))) %>%
dplyr::select(-Sunset_time)
dat <- moth %>% drop_na(Date, ID, Location, Treatment, Treatment_y_n, Colour, Spectra, Moon_Phase, Temp, Wind_speed_ms, Humidity, Common_name, Latin_name, Family, Sub_family, Latency, Erratic_behaviour)
tally(Spectra ~ Colour | Treatment, data = dat)
t
enhanced_stripchart(Latency ~ Treatment, data = dat) +
labs(y = "Latency(seconds)")
enhanced_stripchart(log_Latency ~ Treatment, data = dat) +
labs(y = "Latency(log seconds)",
title = "Initial Response Latency")
dat <- dat %>% mutate(Treatment = factor(Treatment),
Treatment = fct_recode(Treatment,
"Cool Phosphor-coated" = "1",
"Warm Phosphor-coated" = "2",
"Cool RGB" = "3",
"Warm RGB" = "4"),
log_Latency = log(Latency))
enhanced_stripchart(log_Latency ~ Treatment, data = dat) +
labs(y = "Latency(log seconds)",
title = "Initial Response Latency")
dat %>% ggplot(mapping = aes(x = Humidity, y = log_Latency)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
geom_smooth(col = "red", lty = 2, se = F) +
facet_wrap(~ Treatment) +
scale_color_viridis(discrete = TRUE) +
labs(x = "Humidity",
y = "Latency (log seconds)",
title = "Plot of Latency (log secs) versus Humidity, Faceted by Treatment")
moth_model <- lm(log_Latency ~ Humidity * Treatment, data = dat)
summary(moth_model)
sumary(moth_model2)
summary(moth_model2)
moth_model2 <- lm(log_Latency ~ Humidity + Treatment, data = dat)
summary(moth_model2)
plot(alleffects(moth_model2))
plot(allEffects(moth_model2))
summary(moth_model2)
confint(moth_model2, level = 0.95)
